using DomainLayer.Entities;
using Microsoft.EntityFrameworkCore;


namespace DataAccessLayer.DbContextFolder
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {

        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<UserDomain>(entity =>
            {
                entity.HasKey(e => e.Id);

                // Assuming Id is a GUID and generated by the database
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                // Configuring EmailAddress
                entity.Property(e => e.EmailAddress)
                      .IsRequired()
                      .HasMaxLength(100); // Set a max length for the email address

                // Ensuring EmailAddress is unique
                entity.HasIndex(e => e.EmailAddress).IsUnique();

                // Configuring Username
                entity.Property(e => e.Username)
                      .IsRequired()
                      .HasMaxLength(50); // Set a max length for the username

                // Add configurations for other properties and relationships here
            });

            modelBuilder.Entity<CommentDomain>(entity =>
            {
                // Define MovieId as a foreign key (shadow property)
                entity.Property<int>("MovieId").IsRequired();
                // Define AuthorId as a foreign key if User entity is not included in the model
                entity.Property<string>("AuthorId").IsRequired();

                // Optionally, if you have a User entity and want to establish the relationship
                entity.HasOne<UserDomain>().WithMany().HasForeignKey(c => c.AuthorId);
            });
            // Configure other entities
            modelBuilder.Entity<RatingDomain>(entity =>
            {
                // Define MovieId as a foreign key (shadow property)
                entity.Property<int>("MovieId").IsRequired();
                // Define AuthorId as a foreign key if User entity is not included in the model
                entity.Property<string>("UserId").IsRequired();

                // Optionally, if you have a User entity and want to establish the relationship
                entity.HasOne<UserDomain>().WithMany().HasForeignKey(c => c.UserId);
            });
            modelBuilder.Entity<WatchlistDomain>(entity =>
            {
                entity.HasKey(w => w.Id);

                // Assuming Id is an integer and auto-generated
                entity.Property(w => w.Id).ValueGeneratedOnAdd();

                // Configuring Name
                entity.Property(w => w.Name)
                      .IsRequired()
                      .HasMaxLength(100); // Adjust max length as needed

                // Define UserId as a foreign key
                entity.Property<string>("UserId").IsRequired();

                // Configure the relationship with UserDomain if User entity is included
                entity.HasOne<UserDomain>().WithMany().HasForeignKey(w => w.UserId);


            });

        }

        public DbSet<UserDomain> Users { get; set; }
        public DbSet<CommentDomain> Comments { get; set; }

        public DbSet<RatingDomain> MovieRatings { get; set; }
        public DbSet<WatchlistDomain> Watchlists { get; set; }
    }
}
